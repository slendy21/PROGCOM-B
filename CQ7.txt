{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hames08/PROGCOM-B/blob/main/CQ7\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##1)False\n",
        "Es un valor que representa que un resultado es falso"
      ],
      "metadata": {
        "id": "PmjKxExbLR72"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3R9UybXALKDV",
        "outputId": "719d68ac-0941-4fe8-b7f0-14609e6db8a7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False <class 'bool'>\n"
          ]
        }
      ],
      "source": [
        "x = 5 < 3\n",
        "print(x,type(x))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##2)None\n",
        "Termino que representa la ausencia de un valor"
      ],
      "metadata": {
        "id": "m2IVZ3_JL7o4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = None\n",
        "print(type(x))\n",
        "y = 1 + x\n",
        "#genera un error ya que \"x\" no representa ningun tipo de valor, por lo que no puede operarse con números ni cumplir cualquier otra operacion\n",
        "print(y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "id": "yR5820VvMQUv",
        "outputId": "30628495-2896-4b71-f70b-418d32c7ae92"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'NoneType'>\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "unsupported operand type(s) for +: 'int' and 'NoneType'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-2227138384.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;31m#genera un error ya que \"x\" no representa ningun tipo de valor, por lo que no puede operarse con números ni cumplir cualquier otra operacion\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for +: 'int' and 'NoneType'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##3)True\n",
        "Valor booleano que representa \"verdadero\", es decir que una condicion se **cumple**"
      ],
      "metadata": {
        "id": "yIROrwRXMuMQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 5 > 3\n",
        "print(x,type(x))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R8OfszjSNKgD",
        "outputId": "5345776f-ca29-4d97-e070-6003b0161d2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True <class 'bool'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##4)And\n",
        "Operador logico que permite añadir condicionales"
      ],
      "metadata": {
        "id": "qF9sPseLNcrZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 3\n",
        "if x >= 1 and x <= 2:\n",
        "  print(\"El número esta en el rango\")\n",
        "else:\n",
        "  print(\"El número NO esta en el rango\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w7oCc5f3N1aH",
        "outputId": "591c4403-3426-42b4-cf61-04ca8bbaab32"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El número NO esta en el rango\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##5)as\n",
        "Funcion que permite crear un alias en importaciones."
      ],
      "metadata": {
        "id": "VWEU5aqrOQha"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Modulo que permite la ejecucion de calculos avanzados en phyton\n",
        "import math as m\n",
        "# Normalmente se escribe asi pero debido a la abrebiatura da error\n",
        "print(math.sqrt(16))\n",
        "# Dada la abrebiatura el sistema permite operar de esta forma\n",
        "print(m.sqrt(16))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pWRhNqq8OfIp",
        "outputId": "65a79ee1-429a-414a-f2db-17cee9f6d899"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4.0\n",
            "4.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##6)Assert\n",
        "Evalua una condicion e indica el error si es falsa"
      ],
      "metadata": {
        "id": "ceeclkubPZQO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 10\n",
        "assert x < 0"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        },
        "id": "8XkOM5KwPr-P",
        "outputId": "c9c759f6-5eb2-47ce-c9dd-cdfd9b7908d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AssertionError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-2823003067.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32massert\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mAssertionError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##7)breack\n",
        "Funcion que permite romper un ciclo, principalmente se implementa en estructuras de bucle (for o while)"
      ],
      "metadata": {
        "id": "LW3d-e2fPzSn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Se le pide al programa que imprima en bucle los números del 0 al 5 pero al llegar al tres se indica que el bucle se rompa\n",
        "for i in range(5):\n",
        "    if i == 3:\n",
        "        break\n",
        "    print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k0ybxVWPQGOu",
        "outputId": "5a723bff-4317-4d8d-b2ab-48a42775de76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##8)Class\n",
        "Esta funcion permite definir clases las cuales se implementan en la creacion de objetos de la OOP"
      ],
      "metadata": {
        "id": "2RZsU9WNQFco"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Persona:\n",
        "    def __init__(self, nombre):\n",
        "        self.nombre = nombre\n",
        "\n",
        "p = Persona(\"Ana\")\n",
        "print(p.nombre)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r95Eq8CuQyAZ",
        "outputId": "41623e46-f1a5-4326-ad13-8a37cf7d926c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ana\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##9)continue\n",
        "Funcion que permite saltar una iteracion de un bucle"
      ],
      "metadata": {
        "id": "GC2QdlTxRRC8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(5):\n",
        "    if i == 2:\n",
        "        continue\n",
        "    print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KetwHAk0RXHs",
        "outputId": "1cb247b5-9d90-4559-821a-532676e6de80"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "3\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##10)def\n",
        "Permite definir funciones en la OOP"
      ],
      "metadata": {
        "id": "UMtsqodvRikP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def saludar():\n",
        "    return \"Hola\"\n",
        "print(saludar())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y2XsUaJ7RyQr",
        "outputId": "6fe8b581-69a9-4fc4-e45d-61151a4de3b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hola\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##11)del\n",
        "Funcion que permite eliminar objetos"
      ],
      "metadata": {
        "id": "ksta5NWkR0gy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = [1, 2, 3]\n",
        "del x[1]\n",
        "print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "091fy5RLSAbn",
        "outputId": "dcac77e0-7e73-47e2-a98f-5a6fa210d60a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##12)elif\n",
        "Condicional alternativo al if, que permite generar codigos con condicional anidado"
      ],
      "metadata": {
        "id": "RR906mVYSAHj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 5\n",
        "if x < 0:\n",
        "    print(\"Negativo\")\n",
        "elif x == 0:\n",
        "    print(\"Cero\")\n",
        "else:\n",
        "    print(\"Positivo\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "01fl2KeqScEL",
        "outputId": "2d1e44a2-32ff-4778-9891-63917d071569"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Positivo\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##13)else\n",
        "Condicional que suele marcar el final de una o más funciones if"
      ],
      "metadata": {
        "id": "xTOu77-nR9qp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 10\n",
        "if x < 5:\n",
        "    print(\"Menor que 5\")\n",
        "else:\n",
        "    print(\"Mayor o igual a 5\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "75nH_lfgS-iU",
        "outputId": "2b5f21b9-6cd8-45e3-c9a6-8e98766ba34f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mayor o igual a 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##14)except\n",
        "Funcion que permite añadir exepciones a codigos que generalmente se verian interrumpidos por un error"
      ],
      "metadata": {
        "id": "3MsG2I1ITFu2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    print(10 / 0)\n",
        "except ZeroDivisionError:\n",
        "    print(\"Error: división por cero\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t_1ggNz4TT8n",
        "outputId": "bf69f3e1-0372-418e-b2d0-881e01519277"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error: división por cero\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##15)finally\n",
        "Esta funcion genera que tras usar un \"try\", si este se ejecuta correctamente, lo que se encuentre despues del finally se ejecute siempre."
      ],
      "metadata": {
        "id": "l44QD94gTrtN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# situacion funcional\n",
        "try:\n",
        "    x = 1 / 0\n",
        "except:\n",
        "    print(\"Error\")\n",
        "finally:\n",
        "    print(\"Esto siempre se ejecuta\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9TcHB0C9T01Y",
        "outputId": "d4a15ee0-f31f-4751-ad87-b321d819c377"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error\n",
            "Esto siempre se ejecuta\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# situacion no funcional\n",
        "try:\n",
        "    x = 1 / 0\n",
        "finally:\n",
        "    print(\"Esto siempre se ejecuta\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 222
        },
        "id": "5K__mJ3YUV4X",
        "outputId": "d0ee8bb1-83a3-47d3-aa0a-7247ab181a7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Esto siempre se ejecuta\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ZeroDivisionError",
          "evalue": "division by zero",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-4147917282.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Esto siempre se ejecuta\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mZeroDivisionError\u001b[0m: division by zero"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##16)for\n",
        "Funcion que genera que el codigo que se encuientra dentro del bloque de esta, se reitere \"i\" número de veces hasta un limite \"x\""
      ],
      "metadata": {
        "id": "ZGJ8cfAVUg0A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(3):\n",
        "    print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YCQTaJ40U76h",
        "outputId": "f971cee9-5cd8-442d-ef08-db32f9dda0a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###17)form\n",
        "Funcion que permite importar una parte especifica de un modulo"
      ],
      "metadata": {
        "id": "sO21rugsVBsW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from math import pi\n",
        "print(pi)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Daw1hCGPVQIv",
        "outputId": "4d149b42-a282-4299-a976-341b2bb54020"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.141592653589793\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##18)global\n",
        "Codigo que permite declarar un variable global en una funcion"
      ],
      "metadata": {
        "id": "2rPa-rf7VVFz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 5\n",
        "def f():\n",
        "    global x\n",
        "    x = 10\n",
        "f()\n",
        "print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b4p30GA9Vm6D",
        "outputId": "28c25e2d-e8ee-4510-f321-bbe7e964e3b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##19)if\n",
        "Estructura condicional que ejecuta un codigo si se cumple una condicion"
      ],
      "metadata": {
        "id": "_C5nSUtOVuHf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 7\n",
        "if x > 5:\n",
        "    print(\"x es mayor que 5\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L99jlcIUV4E5",
        "outputId": "1918c65d-d086-4259-d94b-1723f315bf84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x es mayor que 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##20)import\n",
        "Esta funcion permita importar modulos que amplian las funciones del programa base de phyton"
      ],
      "metadata": {
        "id": "tK3U2xZ9V96F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "print(random.randint(1, 10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5mU4ZbAJWKGe",
        "outputId": "8c23403a-f84f-48b9-ea0f-f97b0c39e267"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##21)in\n",
        "Funcion que permite comprobar la pertenencia de un dato en una lista"
      ],
      "metadata": {
        "id": "0ivo37KTWNuL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(3 in [1, 2, 3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SEJ9H0s6WaxD",
        "outputId": "b6a7ef97-0f01-4ca4-95f3-dc47bfee183b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(3 in [1, 2, 4])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZE7r7OaJW766",
        "outputId": "ff2eaef3-98d5-4ade-eb76-9d42b75a52a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##22)is\n",
        "Funcion que permite comprobar la identidad de los objetos"
      ],
      "metadata": {
        "id": "ybFG_txzWNtE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = None\n",
        "print(x is None)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BteVbv3mWy6x",
        "outputId": "31a5554d-56f7-456e-9de5-ed355aa1d737"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = 1\n",
        "print(x is None)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k5E-Dg-hW3_t",
        "outputId": "9e1a5caa-3fd6-4aa6-d6ee-f1a5436754c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##23)lambda\n",
        "Funcion que permite definir funciones anónimas de corta duracion\n"
      ],
      "metadata": {
        "id": "uaubMGr7W-Nv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "f = lambda x: x * 2\n",
        "print(f(5))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SPT4UiKsXi11",
        "outputId": "08c40226-a5f8-4534-c950-9f69285beec6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##24)Ononlocal\n",
        "La función nonlocal en Python sirve para declarar una variable dentro de una función anidada como una variable que pertenece al ámbito de la función externa inmediata (no al ámbito global), permitiendo así modificarla desde la función interna."
      ],
      "metadata": {
        "id": "8ty6ELl4Zgmh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def exterior():\n",
        "    x = \"local\"\n",
        "    def interior():\n",
        "        nonlocal x\n",
        "        x = \"modificado\"\n",
        "    interior()\n",
        "    return x\n",
        "print(exterior())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e7Noj9cAZlUr",
        "outputId": "66733e06-6f70-42b1-e01f-074d448ac7ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "modificado\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##25)not\n",
        "Operador logico de negacion"
      ],
      "metadata": {
        "id": "mCmbz0jMZoLp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = None\n",
        "print(not x is None)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "er3M3KsAZwLX",
        "outputId": "aceef908-46ca-4d53-aa15-fdc1d7f0c7b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##26)or\n",
        "Operador logico de disyuncion\n",
        "texto en negrita"
      ],
      "metadata": {
        "id": "3SSiUoDDZ32n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 2\n",
        "if x == 1 or x == 2:\n",
        "  print(\"El número es deseado\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i2gnse-laD4g",
        "outputId": "ee7c4458-c97c-4a16-92dd-ffc7a379e7c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El número es deseado\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##27)pass\n",
        "Funcion que salta un procedimiento cuando el codigo de este todavia no se encuentra del todo escrito (permite probar el resto del codigo)"
      ],
      "metadata": {
        "id": "h1OlKtlebhp0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def funcion_en_construccion():\n",
        "    pass\n",
        "for i in range(3):\n",
        "  #aqui deberia aparecer error, debido a que no hay un funcionamiento del bucle\n",
        "    pass\n",
        "print(\"El programa sigue funcionando\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jziYZveRbvci",
        "outputId": "bc18bd00-a2a9-4a84-aa98-6e8fe94f0110"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El programa sigue funcionando\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##28)raise\n",
        "Funcion que permite generar exepciones manualmente, se puede implementar para detener el programa cuando pasa algo inesperado"
      ],
      "metadata": {
        "id": "BjJ_LdNmcK8e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def dividir(a, b):\n",
        "    if b == 0:\n",
        "        raise ValueError(\"No se puede dividir entre cero\")\n",
        "    return a / b\n",
        "\n",
        "try:\n",
        "    print(dividir(10, 0))\n",
        "except ValueError as e:\n",
        "    print(\"Error:\", e)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FKzhV5nJcl4N",
        "outputId": "8f6483a3-b55a-4948-8497-f2bc27d2ae82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error: No se puede dividir entre cero\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##29)return\n",
        "Operacion que devuelve el valor de una funcion"
      ],
      "metadata": {
        "id": "8Dm-lqd-aPvv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def suma(a, b):\n",
        "    return a + b\n",
        "print(suma(3, 4))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Di-flDZVagkR",
        "outputId": "484ad828-c967-4fcd-b57f-61d9069edf6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##30)try\n",
        "Es la funcioon que delimita a partir de que punto se pueden hacer exepciones a los errores"
      ],
      "metadata": {
        "id": "uscDp0xJctg8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    numero = int(\"hola\")  # esto da error\n",
        "    print(\"Número:\", numero)\n",
        "except ValueError:\n",
        "    print(\"Error: no se puede convertir a número\")\n",
        "finally:\n",
        "    print(\"Bloque finally: siempre se ejecuta\")"
      ],
      "metadata": {
        "id": "vqwXZ3oxc5j5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##31)while\n",
        "Funcion ciclica que genera que se repita un bloque de codigo mientras se cumpla una condicion"
      ],
      "metadata": {
        "id": "9AGgR933am7Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "i = 0\n",
        "while i < 8:\n",
        "    print(i)\n",
        "    i += 1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4GJ8zrxUaw4x",
        "outputId": "02644c55-5620-4aeb-e427-e362caf27bea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##32)with\n",
        "with se utiliza para manejar recursos automáticamente (como archivos, conexiones, sockets, etc.).\n"
      ],
      "metadata": {
        "id": "Zwkbn_qzfsf-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "with open(\"ejemplo.txt\", \"w\") as f:\n",
        "    f.write(\"Hola mundo\")"
      ],
      "metadata": {
        "id": "v_l9FCKnfy0S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##33)yield\n",
        "Fucnion similar a \"return\" con la exepcion de que regresa los datos de uno en uno, evitando sobrecargar la memoria del programa"
      ],
      "metadata": {
        "id": "wlgzUm3SbBh_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def contar():\n",
        "    yield 1\n",
        "    yield 2\n",
        "    yield 3\n",
        "for numero in contar():\n",
        "    print(numero)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZB-Vu_A2bH5n",
        "outputId": "33557528-d3f1-4f2f-9631-87a0ae92c4e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n"
          ]
        }
      ]
    }
  ]
}